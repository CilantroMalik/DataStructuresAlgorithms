"""
--- Pascal's Triangle ---
Recursive program that generates a given number of rows of Pascal's triangle (generated by starting with a "sea"
of 1s and where each element of each successive row is generated by adding the two numbers diagonally above that
element, starting with 1, 1 1, 1 2 1, etc so that it forms the shape of a triangle.
"""

def pascal(n):
    if n == 1:  # base case: the first row just contains a single 1
        print("1")  # we have to print it out so it appears on screen
        return [1]  # and return the contents as a list for recursion purposes
    else:
        row = []  # will hold the current row
        prevRow = pascal(n - 1)  # recursive step: get the previous row
        for i in range(n):  # each row will have n numbers in it
            # each number is the sum of the number "above" it (same index of the previous row) and the number to the
            # upward left "diagonal" of it (one index lower on the previous row). This is how we construct each
            # successive row of the triangle.
            diag, above = 0, 0  # default to zero if the desired position doesn't exist
            if 0 <= i - 1 < len(prevRow):  # if the "diagonal" index is valid
                diag = prevRow[i - 1]
            if 0 <= i < len(prevRow):  # if the "above" index is valid
                above = prevRow[i]
            row.append(diag + above)  # sum up the two and add it as a new element
            # don't forget to print the element as well
            print(str(diag + above) + "  ", end='' if i != n - 1 else '\n')
    return row  # return the newly constructed row for recursion purposes


# testing (can replace the parameter for as many rows as desired)
pascal(14)
